setwd("/Users/charlesrocabert/Desktop/NoisyFGM_paper/experimental-data")#
#
library("gplots")#
library("ellipse")#
library("rgl")#
library("ade4")#
library("corrplot")#
#
### Get strain names from file ####
get_strain_names <- function()#
{#
	d = read.table("strain_names.txt", h=F)#
	return(d[,1])#
}#
#
### Get strain data ####
get_strain_data <- function( strain )#
{#
	d = read.table(paste("corrected/centered_scaled_",strain,".txt",sep=""), h=T, sep=" ")#
	return(as.matrix(d))#
}#
#
### Isolate data lines with Inf or NAs ####
isolate_bad_data <- function( data )#
{#
	Nrow = length(data[,1])#
	new_data = c()#
	for (i in seq(1,Nrow))#
	{#
		vec = data[i,]#
		if (length(vec[is.na(vec)])==0 & length(vec[is.infinite(vec)])==0)#
		{#
			new_data = rbind(new_data, vec)#
		}#
	}#
	return(new_data)#
}#
#
### Compute a correlation test on the entire COR ####
cor.mtest <- function( mat, conf.level = 0.95 )#
{#
  mat <- as.matrix(mat)#
    n <- ncol(mat)#
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)#
    diag(p.mat) <- 0#
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1#
    for(i in 1:(n-1)){#
        for(j in (i+1):n){#
            tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)#
            p.mat[i,j] <- p.mat[j,i] <- tmp$p.value#
            lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]#
            uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]#
        }#
    }#
    return(list(p.mat, lowCI.mat, uppCI.mat))#
}#
#
### Plot noise correlations for interstrain axis PC1 and PC2 ####
plot_corr_mat <- function( V, SIGMA_1 )#
{#
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		png(filename=paste("cor/",strain,".png",sep=""), width=1000, height=1000)#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		#test = cor.mtest(st_proj, 0.95)#
		test = cor.mtest(st_proj, 1-0.05/666)#
		corrplot(COV, method="circle", p.mat = test[[1]], insig = "pch")#
		dev.off()#
	}#
}#
#
### Compute mean correlations and plot 2 first PCs ####
plot_mean_best_noise <- function( V, SIGMA_1, MINX, MAXX, MINY, MAXY )#
{#
	### Compute mean cor and get PC1,PC2 ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	MEAN_COV = matrix(rep(0.0,Nst*Nst), nrow=Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		MEAN_COV = MEAN_COV+COV#
	}#
	MEAN_COV = MEAN_COV/Nst#
	COVPOS = abs(COV)#
	#COVPOS[MEAN_COV==1.0] = 0#
	diag(COVPOS) = 0.0#
	maxi = which(COVPOS==max(COVPOS), arr.ind=T)#
	print(maxi)#
	PC1 = maxi[2,1]#
	PC2 = maxi[2,2]#
	### Plot data ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	#png(filename=paste("auto/",PC1,"_",PC2,".png",sep=""))#
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="", ylab="")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "cornflowerblue"#
		#colors[i] = "tomato"#
		strain  = strains[i]#
		st      = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		x       = mean(st_proj[,PC1])#
		y       = mean(st_proj[,PC2])#
		COV = cov(st_proj[,c(PC1,PC2)])#
		#DIAG = diag(COV)#
		#COV = diag(DIAG, nrow=length(DIAG), ncol=length(DIAG))#
		ELLIPS = ellipse(COV*0.005, centre=c(x, y))#
		#points(st_proj[,PC1], st_proj[,PC2], pch=20, col=adjustcolor(colors[i], alpha.f=0.02))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	#dev.off()#
}#
#
###################
#      MAIN      ##
###################
#
#-----------------------------------------##
# 1) Get interstrain data and compute the ##
#    singular values decomposition        ##
#-----------------------------------------##
INTER = read.table("interstrain_means/centered_scaled_mean.txt", sep=" ", h=T)#
#
N = length(INTER[1,])#
colnames = names(INTER)[2:N]#
rownames = INTER[,1]#
INTER = as.matrix(INTER[,2:N])#
colnames(INTER) = colnames#
rownames(INTER) = rownames#
#
SVD = svd(INTER)#
#
SV = SVD$d#
SIGMA = diag(SVD$d)#
SIGMA_1 = diag(1/SVD$d)#
U = as.matrix(SVD$u)#
V = as.matrix(SVD$v)#
#
plot_mean_best_noise( V, SIGMA_1, MINX, -1, 1, -1, 1)
setwd("/Users/charlesrocabert/Desktop/NoisyFGM_paper/experimental-data")#
#
library("gplots")#
library("ellipse")#
library("rgl")#
library("ade4")#
library("corrplot")#
#
### Get strain names from file ####
get_strain_names <- function()#
{#
	d = read.table("strain_names.txt", h=F)#
	return(d[,1])#
}#
#
### Get strain data ####
get_strain_data <- function( strain )#
{#
	d = read.table(paste("corrected/centered_scaled_",strain,".txt",sep=""), h=T, sep=" ")#
	return(as.matrix(d))#
}#
#
### Isolate data lines with Inf or NAs ####
isolate_bad_data <- function( data )#
{#
	Nrow = length(data[,1])#
	new_data = c()#
	for (i in seq(1,Nrow))#
	{#
		vec = data[i,]#
		if (length(vec[is.na(vec)])==0 & length(vec[is.infinite(vec)])==0)#
		{#
			new_data = rbind(new_data, vec)#
		}#
	}#
	return(new_data)#
}#
#
### Compute a correlation test on the entire COR ####
cor.mtest <- function( mat, conf.level = 0.95 )#
{#
  mat <- as.matrix(mat)#
    n <- ncol(mat)#
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)#
    diag(p.mat) <- 0#
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1#
    for(i in 1:(n-1)){#
        for(j in (i+1):n){#
            tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)#
            p.mat[i,j] <- p.mat[j,i] <- tmp$p.value#
            lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]#
            uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]#
        }#
    }#
    return(list(p.mat, lowCI.mat, uppCI.mat))#
}#
#
### Plot noise correlations for interstrain axis PC1 and PC2 ####
plot_corr_mat <- function( V, SIGMA_1 )#
{#
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		png(filename=paste("cor/",strain,".png",sep=""), width=1000, height=1000)#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		#test = cor.mtest(st_proj, 0.95)#
		test = cor.mtest(st_proj, 1-0.05/666)#
		corrplot(COV, method="circle", p.mat = test[[1]], insig = "pch")#
		dev.off()#
	}#
}#
#
### Compute mean correlations and plot 2 first PCs ####
plot_mean_best_noise <- function( V, SIGMA_1, MINX, MAXX, MINY, MAXY )#
{#
	### Compute mean cor and get PC1,PC2 ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	MEAN_COV = matrix(rep(0.0,Nst*Nst), nrow=Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		MEAN_COV = MEAN_COV+COV#
	}#
	MEAN_COV = MEAN_COV/Nst#
	COVPOS = abs(COV)#
	#COVPOS[MEAN_COV==1.0] = 0#
	diag(COVPOS) = 0.0#
	maxi = which(COVPOS==max(COVPOS), arr.ind=T)#
	print(maxi)#
	PC1 = maxi[2,1]#
	PC2 = maxi[2,2]#
	### Plot data ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	#png(filename=paste("auto/",PC1,"_",PC2,".png",sep=""))#
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="", ylab="")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "cornflowerblue"#
		#colors[i] = "tomato"#
		strain  = strains[i]#
		st      = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		x       = mean(st_proj[,PC1])#
		y       = mean(st_proj[,PC2])#
		COV = cov(st_proj[,c(PC1,PC2)])#
		#DIAG = diag(COV)#
		#COV = diag(DIAG, nrow=length(DIAG), ncol=length(DIAG))#
		ELLIPS = ellipse(COV*0.005, centre=c(x, y))#
		#points(st_proj[,PC1], st_proj[,PC2], pch=20, col=adjustcolor(colors[i], alpha.f=0.02))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	#dev.off()#
}#
#
###################
#      MAIN      ##
###################
#
#-----------------------------------------##
# 1) Get interstrain data and compute the ##
#    singular values decomposition        ##
#-----------------------------------------##
INTER = read.table("interstrain_means/centered_scaled_mean.txt", sep=" ", h=T)#
#
N = length(INTER[1,])#
colnames = names(INTER)[2:N]#
rownames = INTER[,1]#
INTER = as.matrix(INTER[,2:N])#
colnames(INTER) = colnames#
rownames(INTER) = rownames#
#
SVD = svd(INTER)#
#
SV = SVD$d#
SIGMA = diag(SVD$d)#
SIGMA_1 = diag(1/SVD$d)#
U = as.matrix(SVD$u)#
V = as.matrix(SVD$v)#
#
plot_mean_best_noise( V, SIGMA_1, -1, 1, -1, 1)
setwd("/Users/charlesrocabert/Desktop/NoisyFGM_paper/experimental-data")#
#
library("gplots")#
library("ellipse")#
library("rgl")#
library("ade4")#
library("corrplot")#
#
### Get strain names from file ####
get_strain_names <- function()#
{#
	d = read.table("strain_names.txt", h=F)#
	return(d[,1])#
}#
#
### Get strain data ####
get_strain_data <- function( strain )#
{#
	d = read.table(paste("corrected/centered_scaled_",strain,".txt",sep=""), h=T, sep=" ")#
	return(as.matrix(d))#
}#
#
### Isolate data lines with Inf or NAs ####
isolate_bad_data <- function( data )#
{#
	Nrow = length(data[,1])#
	new_data = c()#
	for (i in seq(1,Nrow))#
	{#
		vec = data[i,]#
		if (length(vec[is.na(vec)])==0 & length(vec[is.infinite(vec)])==0)#
		{#
			new_data = rbind(new_data, vec)#
		}#
	}#
	return(new_data)#
}#
#
### Compute a correlation test on the entire COR ####
cor.mtest <- function( mat, conf.level = 0.95 )#
{#
  mat <- as.matrix(mat)#
    n <- ncol(mat)#
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)#
    diag(p.mat) <- 0#
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1#
    for(i in 1:(n-1)){#
        for(j in (i+1):n){#
            tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)#
            p.mat[i,j] <- p.mat[j,i] <- tmp$p.value#
            lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]#
            uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]#
        }#
    }#
    return(list(p.mat, lowCI.mat, uppCI.mat))#
}#
#
### Plot noise correlations for interstrain axis PC1 and PC2 ####
plot_corr_mat <- function( V, SIGMA_1 )#
{#
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		png(filename=paste("cor/",strain,".png",sep=""), width=1000, height=1000)#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		#test = cor.mtest(st_proj, 0.95)#
		test = cor.mtest(st_proj, 1-0.05/666)#
		corrplot(COV, method="circle", p.mat = test[[1]], insig = "pch")#
		dev.off()#
	}#
}#
#
### Compute mean correlations and plot 2 first PCs ####
plot_mean_best_noise <- function( V, SIGMA_1, MINX, MAXX, MINY, MAXY )#
{#
	### Compute mean cor and get PC1,PC2 ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	MEAN_COV = matrix(rep(0.0,Nst*Nst), nrow=Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		MEAN_COV = MEAN_COV+COV#
	}#
	MEAN_COV = MEAN_COV/Nst#
	COVPOS = abs(COV)#
	#COVPOS[MEAN_COV==1.0] = 0#
	diag(COVPOS) = 0.0#
	maxi = which(COVPOS==max(COVPOS), arr.ind=T)#
	print(maxi)#
	PC1 = maxi[2,1]#
	PC2 = maxi[2,2]#
	### Plot data ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	png(filename=paste("highest_correlation_axes.png",sep=""), width=1000, height=600)#
	par(mfrow=c(1,2))#
	### first plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "cornflowerblue"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		val       = diag(COV)#
		COV       = diag(val, nrow=length(val), ncol=length(val))#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	### Second plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "tomato"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	dev.off()#
}#
#
###################
#      MAIN      ##
###################
#
#-----------------------------------------##
# 1) Get interstrain data and compute the ##
#    singular values decomposition        ##
#-----------------------------------------##
INTER = read.table("interstrain_means/centered_scaled_mean.txt", sep=" ", h=T)#
#
N = length(INTER[1,])#
colnames = names(INTER)[2:N]#
rownames = INTER[,1]#
INTER = as.matrix(INTER[,2:N])#
colnames(INTER) = colnames#
rownames(INTER) = rownames#
#
SVD = svd(INTER)#
#
SV = SVD$d#
SIGMA = diag(SVD$d)#
SIGMA_1 = diag(1/SVD$d)#
U = as.matrix(SVD$u)#
V = as.matrix(SVD$v)#
#
plot_mean_best_noise( V, SIGMA_1, -1, 1, -1, 1)
setwd("/Users/charlesrocabert/Desktop/NoisyFGM_paper/experimental-data")#
#
library("gplots")#
library("ellipse")#
library("rgl")#
library("ade4")#
library("corrplot")#
#
### Get strain names from file ####
get_strain_names <- function()#
{#
	d = read.table("strain_names.txt", h=F)#
	return(d[,1])#
}#
#
### Get strain data ####
get_strain_data <- function( strain )#
{#
	d = read.table(paste("corrected/centered_scaled_",strain,".txt",sep=""), h=T, sep=" ")#
	return(as.matrix(d))#
}#
#
### Isolate data lines with Inf or NAs ####
isolate_bad_data <- function( data )#
{#
	Nrow = length(data[,1])#
	new_data = c()#
	for (i in seq(1,Nrow))#
	{#
		vec = data[i,]#
		if (length(vec[is.na(vec)])==0 & length(vec[is.infinite(vec)])==0)#
		{#
			new_data = rbind(new_data, vec)#
		}#
	}#
	return(new_data)#
}#
#
### Compute a correlation test on the entire COR ####
cor.mtest <- function( mat, conf.level = 0.95 )#
{#
  mat <- as.matrix(mat)#
    n <- ncol(mat)#
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)#
    diag(p.mat) <- 0#
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1#
    for(i in 1:(n-1)){#
        for(j in (i+1):n){#
            tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)#
            p.mat[i,j] <- p.mat[j,i] <- tmp$p.value#
            lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]#
            uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]#
        }#
    }#
    return(list(p.mat, lowCI.mat, uppCI.mat))#
}#
#
### Plot noise correlations for interstrain axis PC1 and PC2 ####
plot_corr_mat <- function( V, SIGMA_1 )#
{#
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		png(filename=paste("cor/",strain,".png",sep=""), width=1000, height=1000)#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		#test = cor.mtest(st_proj, 0.95)#
		test = cor.mtest(st_proj, 1-0.05/666)#
		corrplot(COV, method="circle", p.mat = test[[1]], insig = "pch")#
		dev.off()#
	}#
}#
#
### Compute mean correlations and plot 2 first PCs ####
plot_mean_best_noise <- function( V, SIGMA_1, MINX, MAXX, MINY, MAXY )#
{#
	### Compute mean cor and get PC1,PC2 ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	MEAN_COV = matrix(rep(0.0,Nst*Nst), nrow=Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		MEAN_COV = MEAN_COV+COV#
	}#
	MEAN_COV = MEAN_COV/Nst#
	COVPOS = abs(COV)#
	#COVPOS[MEAN_COV==1.0] = 0#
	diag(COVPOS) = 0.0#
	maxi = which(COVPOS==max(COVPOS), arr.ind=T)#
	print(maxi)#
	PC1 = maxi[2,1]#
	PC2 = maxi[2,2]#
	### Plot data ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	png(filename=paste("highest_correlation_axes.png",sep=""), width=1000, height=600)#
	par(mfrow=c(1,2))#
	### first plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "cornflowerblue"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		val       = diag(COV)#
		COV       = diag(val, nrow=length(val), ncol=length(val))#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	### Second plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "tomato"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	dev.off()#
}#
#
###################
#      MAIN      ##
###################
#
args = commandArgs(TRUE)#
#
results_file = args[1]#
#
print(args[1])#
#-----------------------------------------##
# 1) Get interstrain data and compute the ##
#    singular values decomposition        ##
#-----------------------------------------##
INTER = read.table("interstrain_means/centered_scaled_mean.txt", sep=" ", h=T)#
#
N = length(INTER[1,])#
colnames = names(INTER)[2:N]#
rownames = INTER[,1]#
INTER = as.matrix(INTER[,2:N])#
colnames(INTER) = colnames#
rownames(INTER) = rownames#
#
SVD = svd(INTER)#
#
SV = SVD$d#
SIGMA = diag(SVD$d)#
SIGMA_1 = diag(1/SVD$d)#
U = as.matrix(SVD$u)#
V = as.matrix(SVD$v)#
#
plot_mean_best_noise( V, SIGMA_1, -1, 1, -1, 1)
dirname()
library("tools")
dirname()
dirname(sys.frame(1)$ofile)
dirname(sys.frame(0)$ofile)
library("tools")#
initial.options <- commandArgs(trailingOnly = FALSE)#
file.arg.name <- "--file="#
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])#
script.basename <- dirname(script.name)#
print(script.basename)
frame_files <- lapply(sys.frames(), function(x) x$ofile)#
frame_files <- Filter(Negate(is.null), frame_files)#
PATH <- dirname(frame_files[[length(frame_files)]])
thisFile <- function() {#
        cmdArgs <- commandArgs(trailingOnly = FALSE)#
        needle <- "--file="#
        match <- grep(needle, cmdArgs)#
        if (length(match) > 0) {#
                # Rscript#
                return(normalizePath(sub(needle, "", cmdArgs[match])))#
        } else {#
                # 'source'd via R console#
                return(normalizePath(sys.frames()[[1]]$ofile))#
        }#
}#
thisFile()
args <- commandArgs(trailingOnly = F)  #
scriptPath <- normalizePath(dirname(sub("^--file=", "", args[grep("^--file=", args)])))
args <- commandArgs(trailingOnly = F)  #
scriptPath <- normalizePath(dirname(sub("^--file=", "", args[grep("^--file=", args)])))#
scriptPath
setwd("/Users/charlesrocabert/Desktop/NoisyFGM_paper/experimental-data")#
#
library("gplots")#
library("ellipse")#
library("rgl")#
library("ade4")#
library("corrplot")#
#
### Get strain names from file ####
get_strain_names <- function()#
{#
	d = read.table("strain_names.txt", h=F)#
	return(d[,1])#
}#
#
### Get strain data ####
get_strain_data <- function( strain )#
{#
	d = read.table(paste("corrected/centered_scaled_",strain,".txt",sep=""), h=T, sep=" ")#
	return(as.matrix(d))#
}#
#
### Isolate data lines with Inf or NAs ####
isolate_bad_data <- function( data )#
{#
	Nrow = length(data[,1])#
	new_data = c()#
	for (i in seq(1,Nrow))#
	{#
		vec = data[i,]#
		if (length(vec[is.na(vec)])==0 & length(vec[is.infinite(vec)])==0)#
		{#
			new_data = rbind(new_data, vec)#
		}#
	}#
	return(new_data)#
}#
#
### Compute a correlation test on the entire COR ####
cor.mtest <- function( mat, conf.level = 0.95 )#
{#
  mat <- as.matrix(mat)#
    n <- ncol(mat)#
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)#
    diag(p.mat) <- 0#
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1#
    for(i in 1:(n-1)){#
        for(j in (i+1):n){#
            tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)#
            p.mat[i,j] <- p.mat[j,i] <- tmp$p.value#
            lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]#
            uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]#
        }#
    }#
    return(list(p.mat, lowCI.mat, uppCI.mat))#
}#
#
### Plot noise correlations for interstrain axis PC1 and PC2 ####
plot_corr_mat <- function( V, SIGMA_1 )#
{#
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		png(filename=paste("cor/",strain,".png",sep=""), width=1000, height=1000)#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		#test = cor.mtest(st_proj, 0.95)#
		test = cor.mtest(st_proj, 1-0.05/666)#
		corrplot(COV, method="circle", p.mat = test[[1]], insig = "pch")#
		dev.off()#
	}#
}#
#
### Compute mean correlations and plot 2 first PCs ####
plot_mean_best_noise <- function( V, SIGMA_1, MINX, MAXX, MINY, MAXY )#
{#
	### Compute mean cor and get PC1,PC2 ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	MEAN_COV = matrix(rep(0.0,Nst*Nst), nrow=Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		MEAN_COV = MEAN_COV+COV#
	}#
	MEAN_COV = MEAN_COV/Nst#
	COVPOS = abs(COV)#
	#COVPOS[MEAN_COV==1.0] = 0#
	diag(COVPOS) = 0.0#
	maxi = which(COVPOS==max(COVPOS), arr.ind=T)#
	print(maxi)#
	PC1 = maxi[2,1]#
	PC2 = maxi[2,2]#
	### Plot data ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	png(filename=paste("highest_correlation_axes.png",sep=""), width=1000, height=600)#
	par(mfrow=c(1,2))#
	### first plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "cornflowerblue"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		val       = diag(COV)#
		COV       = diag(val, nrow=length(val), ncol=length(val))#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	### Second plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "tomato"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	dev.off()#
}#
###################
#      MAIN      ##
###################
#
setwd("/Users/charlesrocabert/Desktop/script yeast/")#
#
INTER = read.table("interstrain_means/centered_scaled_mean.txt", sep=" ", h=T)#
#
N = length(INTER[1,])#
colnames = names(INTER)[2:N]#
rownames = INTER[,1]#
INTER = as.matrix(INTER[,2:N])#
colnames(INTER) = colnames#
rownames(INTER) = rownames#
#
SVD = svd(INTER)#
#
SV = SVD$d#
SIGMA = diag(SVD$d)#
SIGMA_1 = diag(1/SVD$d)#
U = as.matrix(SVD$u)#
V = as.matrix(SVD$v)#
#
plot_mean_best_noise( V, SIGMA_1, -1, 1, -1, 1)
library("gplots")#
library("ellipse")#
library("rgl")#
library("ade4")#
library("corrplot")#
#
### Get strain names from file ####
get_strain_names <- function()#
{#
	d = read.table("strain_names.txt", h=F)#
	return(d[,1])#
}#
#
### Get strain data ####
get_strain_data <- function( strain )#
{#
	d = read.table(paste("corrected/centered_scaled_",strain,".txt",sep=""), h=T, sep=" ")#
	return(as.matrix(d))#
}#
#
### Isolate data lines with Inf or NAs ####
isolate_bad_data <- function( data )#
{#
	Nrow = length(data[,1])#
	new_data = c()#
	for (i in seq(1,Nrow))#
	{#
		vec = data[i,]#
		if (length(vec[is.na(vec)])==0 & length(vec[is.infinite(vec)])==0)#
		{#
			new_data = rbind(new_data, vec)#
		}#
	}#
	return(new_data)#
}#
#
### Compute a correlation test on the entire COR ####
cor.mtest <- function( mat, conf.level = 0.95 )#
{#
  mat <- as.matrix(mat)#
    n <- ncol(mat)#
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)#
    diag(p.mat) <- 0#
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1#
    for(i in 1:(n-1)){#
        for(j in (i+1):n){#
            tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)#
            p.mat[i,j] <- p.mat[j,i] <- tmp$p.value#
            lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]#
            uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]#
        }#
    }#
    return(list(p.mat, lowCI.mat, uppCI.mat))#
}#
#
### Plot noise correlations for interstrain axis PC1 and PC2 ####
plot_corr_mat <- function( V, SIGMA_1 )#
{#
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		png(filename=paste("cor/",strain,".png",sep=""), width=1000, height=1000)#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		#test = cor.mtest(st_proj, 0.95)#
		test = cor.mtest(st_proj, 1-0.05/666)#
		corrplot(COV, method="circle", p.mat = test[[1]], insig = "pch")#
		dev.off()#
	}#
}#
#
### Compute mean correlations and plot 2 first PCs ####
plot_mean_best_noise <- function( V, SIGMA_1, MINX, MAXX, MINY, MAXY )#
{#
	### Compute mean cor and get PC1,PC2 ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	MEAN_COV = matrix(rep(0.0,Nst*Nst), nrow=Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		MEAN_COV = MEAN_COV+COV#
	}#
	MEAN_COV = MEAN_COV/Nst#
	COVPOS = abs(COV)#
	#COVPOS[MEAN_COV==1.0] = 0#
	diag(COVPOS) = 0.0#
	maxi = which(COVPOS==max(COVPOS), arr.ind=T)#
	print(maxi)#
	PC1 = maxi[2,1]#
	PC2 = maxi[2,2]#
	### Plot data ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	png(filename=paste("highest_correlation_axes.png",sep=""), width=1000, height=600)#
	par(mfrow=c(1,2))#
	### first plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "cornflowerblue"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		val       = diag(COV)#
		COV       = diag(val, nrow=length(val), ncol=length(val))#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	### Second plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "tomato"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	dev.off()#
}#
###################
#      MAIN      ##
###################
#
setwd("/Users/charlesrocabert/Desktop/script\ yeast/")#
#
INTER = read.table("interstrain_means/centered_scaled_mean.txt", sep=" ", h=T)#
#
N = length(INTER[1,])#
colnames = names(INTER)[2:N]#
rownames = INTER[,1]#
INTER = as.matrix(INTER[,2:N])#
colnames(INTER) = colnames#
rownames(INTER) = rownames#
#
SVD = svd(INTER)#
#
SV = SVD$d#
SIGMA = diag(SVD$d)#
SIGMA_1 = diag(1/SVD$d)#
U = as.matrix(SVD$u)#
V = as.matrix(SVD$v)#
#
plot_mean_best_noise( V, SIGMA_1, -1, 1, -1, 1)
library("gplots")#
library("ellipse")#
library("rgl")#
library("ade4")#
library("corrplot")#
#
### Get strain names from file ####
get_strain_names <- function()#
{#
	d = read.table("strain_names.txt", h=F)#
	return(d[,1])#
}#
#
### Get strain data ####
get_strain_data <- function( strain )#
{#
	d = read.table(paste("corrected/centered_scaled_",strain,".txt",sep=""), h=T, sep=" ")#
	return(as.matrix(d))#
}#
#
### Isolate data lines with Inf or NAs ####
isolate_bad_data <- function( data )#
{#
	Nrow = length(data[,1])#
	new_data = c()#
	for (i in seq(1,Nrow))#
	{#
		vec = data[i,]#
		if (length(vec[is.na(vec)])==0 & length(vec[is.infinite(vec)])==0)#
		{#
			new_data = rbind(new_data, vec)#
		}#
	}#
	return(new_data)#
}#
#
### Compute a correlation test on the entire COR ####
cor.mtest <- function( mat, conf.level = 0.95 )#
{#
  mat <- as.matrix(mat)#
    n <- ncol(mat)#
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)#
    diag(p.mat) <- 0#
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1#
    for(i in 1:(n-1)){#
        for(j in (i+1):n){#
            tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)#
            p.mat[i,j] <- p.mat[j,i] <- tmp$p.value#
            lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]#
            uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]#
        }#
    }#
    return(list(p.mat, lowCI.mat, uppCI.mat))#
}#
#
### Plot noise correlations for interstrain axis PC1 and PC2 ####
plot_corr_mat <- function( V, SIGMA_1 )#
{#
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		png(filename=paste("cor/",strain,".png",sep=""), width=1000, height=1000)#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		#test = cor.mtest(st_proj, 0.95)#
		test = cor.mtest(st_proj, 1-0.05/666)#
		corrplot(COV, method="circle", p.mat = test[[1]], insig = "pch")#
		dev.off()#
	}#
}#
#
### Compute mean correlations and plot 2 first PCs ####
plot_mean_best_noise <- function( V, SIGMA_1, MINX, MAXX, MINY, MAXY )#
{#
	### Compute mean cor and get PC1,PC2 ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	MEAN_COV = matrix(rep(0.0,Nst*Nst), nrow=Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		MEAN_COV = MEAN_COV+COV#
	}#
	MEAN_COV = MEAN_COV/Nst#
	COVPOS = abs(COV)#
	#COVPOS[MEAN_COV==1.0] = 0#
	diag(COVPOS) = 0.0#
	maxi = which(COVPOS==max(COVPOS), arr.ind=T)#
	print(maxi)#
	PC1 = maxi[2,1]#
	PC2 = maxi[2,2]#
	### Plot data ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	png(filename=paste("highest_correlation_axes.png",sep=""), width=1000, height=600)#
	par(mfrow=c(1,2))#
	### first plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "cornflowerblue"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		val       = diag(COV)#
		COV       = diag(val, nrow=length(val), ncol=length(val))#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	### Second plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "tomato"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	dev.off()#
}#
###################
#      MAIN      ##
###################
#
setwd("/Users/charlesrocabert/Desktop/script_yeast/")#
#
INTER = read.table("interstrain_means/centered_scaled_mean.txt", sep=" ", h=T)#
#
N = length(INTER[1,])#
colnames = names(INTER)[2:N]#
rownames = INTER[,1]#
INTER = as.matrix(INTER[,2:N])#
colnames(INTER) = colnames#
rownames(INTER) = rownames#
#
SVD = svd(INTER)#
#
SV = SVD$d#
SIGMA = diag(SVD$d)#
SIGMA_1 = diag(1/SVD$d)#
U = as.matrix(SVD$u)#
V = as.matrix(SVD$v)#
#
plot_mean_best_noise( V, SIGMA_1, -1, 1, -1, 1)
library("gplots")#
library("ellipse")#
library("rgl")#
library("ade4")#
library("corrplot")#
#
### Get strain names from file ####
get_strain_names <- function()#
{#
	d = read.table("strain_names.txt", h=F)#
	return(d[,1])#
}#
#
### Get strain data ####
get_strain_data <- function( strain )#
{#
	d = read.table(paste("corrected/centered_scaled_",strain,".txt",sep=""), h=T, sep=" ")#
	return(as.matrix(d))#
}#
#
### Isolate data lines with Inf or NAs ####
isolate_bad_data <- function( data )#
{#
	Nrow = length(data[,1])#
	new_data = c()#
	for (i in seq(1,Nrow))#
	{#
		vec = data[i,]#
		if (length(vec[is.na(vec)])==0 & length(vec[is.infinite(vec)])==0)#
		{#
			new_data = rbind(new_data, vec)#
		}#
	}#
	return(new_data)#
}#
#
### Compute a correlation test on the entire COR ####
cor.mtest <- function( mat, conf.level = 0.95 )#
{#
  mat <- as.matrix(mat)#
    n <- ncol(mat)#
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)#
    diag(p.mat) <- 0#
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1#
    for(i in 1:(n-1)){#
        for(j in (i+1):n){#
            tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)#
            p.mat[i,j] <- p.mat[j,i] <- tmp$p.value#
            lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]#
            uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]#
        }#
    }#
    return(list(p.mat, lowCI.mat, uppCI.mat))#
}#
#
### Plot noise correlations for interstrain axis PC1 and PC2 ####
plot_corr_mat <- function( V, SIGMA_1 )#
{#
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		png(filename=paste("cor/",strain,".png",sep=""), width=1000, height=1000)#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		#test = cor.mtest(st_proj, 0.95)#
		test = cor.mtest(st_proj, 1-0.05/666)#
		corrplot(COV, method="circle", p.mat = test[[1]], insig = "pch")#
		dev.off()#
	}#
}#
#
### Compute mean correlations and plot 2 first PCs ####
plot_mean_best_noise <- function( V, SIGMA_1, MINX, MAXX, MINY, MAXY )#
{#
	### Compute mean cor and get PC1,PC2 ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	MEAN_COV = matrix(rep(0.0,Nst*Nst), nrow=Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		MEAN_COV = MEAN_COV+COV#
	}#
	MEAN_COV = MEAN_COV/Nst#
	COVPOS = abs(COV)#
	diag(COVPOS) = 0.0#
	maxi = which(COVPOS==max(COVPOS), arr.ind=T)#
	PC1 = maxi[2,1]#
	PC2 = maxi[2,2]#
	### Plot data ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	png(filename=paste("highest_correlation_axes.png",sep=""), width=800, height=400)#
	par(mfrow=c(1,2))#
	### first plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "cornflowerblue"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		val       = diag(COV)#
		COV       = diag(val, nrow=length(val), ncol=length(val))#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	### Second plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "tomato"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	dev.off()#
}#
###################
#      MAIN      ##
###################
#
setwd("/Users/charlesrocabert/Desktop/script_yeast/")#
#
INTER = read.table("interstrain_means/centered_scaled_mean.txt", sep=" ", h=T)#
#
N = length(INTER[1,])#
colnames = names(INTER)[2:N]#
rownames = INTER[,1]#
INTER = as.matrix(INTER[,2:N])#
colnames(INTER) = colnames#
rownames(INTER) = rownames#
#
SVD = svd(INTER)#
#
SV = SVD$d#
SIGMA = diag(SVD$d)#
SIGMA_1 = diag(1/SVD$d)#
U = as.matrix(SVD$u)#
V = as.matrix(SVD$v)#
#
plot_mean_best_noise( V, SIGMA_1, -1, 1, -1, 1)
library("gplots")#
library("ellipse")#
library("rgl")#
library("ade4")#
library("corrplot")#
#
### Get strain names from file ####
get_strain_names <- function()#
{#
	d = read.table("strain_names.txt", h=F)#
	return(d[,1])#
}#
#
### Get strain data ####
get_strain_data <- function( strain )#
{#
	d = read.table(paste("corrected/centered_scaled_",strain,".txt",sep=""), h=T, sep=" ")#
	return(as.matrix(d))#
}#
#
### Isolate data lines with Inf or NAs ####
isolate_bad_data <- function( data )#
{#
	Nrow = length(data[,1])#
	new_data = c()#
	for (i in seq(1,Nrow))#
	{#
		vec = data[i,]#
		if (length(vec[is.na(vec)])==0 & length(vec[is.infinite(vec)])==0)#
		{#
			new_data = rbind(new_data, vec)#
		}#
	}#
	return(new_data)#
}#
#
### Compute a correlation test on the entire COR ####
cor.mtest <- function( mat, conf.level = 0.95 )#
{#
  mat <- as.matrix(mat)#
    n <- ncol(mat)#
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)#
    diag(p.mat) <- 0#
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1#
    for(i in 1:(n-1)){#
        for(j in (i+1):n){#
            tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)#
            p.mat[i,j] <- p.mat[j,i] <- tmp$p.value#
            lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]#
            uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]#
        }#
    }#
    return(list(p.mat, lowCI.mat, uppCI.mat))#
}#
#
### Plot noise correlations for interstrain axis PC1 and PC2 ####
plot_corr_mat <- function( V, SIGMA_1 )#
{#
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		png(filename=paste("pic/",strain,".png",sep=""), width=1000, height=1000)#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		test = cor.mtest(st_proj, 1-0.05/666)#
		corrplot(COV, method="circle", p.mat = test[[1]], insig = "pch")#
		dev.off()#
	}#
}#
#
### Compute mean correlations and plot 2 first PCs ####
plot_mean_best_noise <- function( V, SIGMA_1, MINX, MAXX, MINY, MAXY )#
{#
	### Compute mean cor and get PC1,PC2 ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	MEAN_COV = matrix(rep(0.0,Nst*Nst), nrow=Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		MEAN_COV = MEAN_COV+COV#
	}#
	MEAN_COV = MEAN_COV/Nst#
	COVPOS = abs(COV)#
	diag(COVPOS) = 0.0#
	maxi = which(COVPOS==max(COVPOS), arr.ind=T)#
	PC1 = maxi[2,1]#
	PC2 = maxi[2,2]#
	### Plot data ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	png(filename=paste("pic/PC1_PC2.png",sep=""), width=1000, height=600)#
	par(mfrow=c(1,2))#
	### first plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "cornflowerblue"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		val       = diag(COV)#
		COV       = diag(val, nrow=length(val), ncol=length(val))#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	### Second plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "tomato"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	dev.off()#
}#
###################
#      MAIN      ##
###################
#
setwd("/Users/charlesrocabert/Desktop/script_yeast/")#
#
INTER = read.table("interstrain_means/centered_scaled_mean.txt", sep=" ", h=T)#
#
N = length(INTER[1,])#
colnames = names(INTER)[2:N]#
rownames = INTER[,1]#
INTER = as.matrix(INTER[,2:N])#
colnames(INTER) = colnames#
rownames(INTER) = rownames#
#
SVD = svd(INTER)#
#
SV = SVD$d#
SIGMA = diag(SVD$d)#
SIGMA_1 = diag(1/SVD$d)#
U = as.matrix(SVD$u)#
V = as.matrix(SVD$v)#
#
plot_corr_mat(V, SIGMA_1)#
plot_mean_best_noise(V, SIGMA_1, -0.6, 0.6, -0.6, 0.6)
library("gplots")#
library("ellipse")#
library("rgl")#
library("ade4")#
library("corrplot")#
#
### Get strain names from file ####
get_strain_names <- function()#
{#
	d = read.table("strain_names.txt", h=F)#
	return(d[,1])#
}#
#
### Get strain data ####
get_strain_data <- function( strain )#
{#
	d = read.table(paste("corrected/centered_scaled_",strain,".txt",sep=""), h=T, sep=" ")#
	return(as.matrix(d))#
}#
#
### Isolate data lines with Inf or NAs ####
isolate_bad_data <- function( data )#
{#
	Nrow = length(data[,1])#
	new_data = c()#
	for (i in seq(1,Nrow))#
	{#
		vec = data[i,]#
		if (length(vec[is.na(vec)])==0 & length(vec[is.infinite(vec)])==0)#
		{#
			new_data = rbind(new_data, vec)#
		}#
	}#
	return(new_data)#
}#
#
### Compute a correlation test on the entire COR ####
cor.mtest <- function( mat, conf.level = 0.95 )#
{#
  mat <- as.matrix(mat)#
    n <- ncol(mat)#
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)#
    diag(p.mat) <- 0#
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1#
    for(i in 1:(n-1)){#
        for(j in (i+1):n){#
            tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)#
            p.mat[i,j] <- p.mat[j,i] <- tmp$p.value#
            lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]#
            uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]#
        }#
    }#
    return(list(p.mat, lowCI.mat, uppCI.mat))#
}#
#
### Plot noise correlations for interstrain axis PC1 and PC2 ####
plot_corr_mat <- function( V, SIGMA_1 )#
{#
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		png(filename=paste("pic/",strain,".png",sep=""), width=1000, height=1000)#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		test = cor.mtest(st_proj, 1-0.05/666)#
		corrplot(COV, method="circle", p.mat = test[[1]], insig = "pch")#
		dev.off()#
	}#
}#
#
### Compute mean correlations and plot 2 first PCs ####
plot_mean_best_noise <- function( V, SIGMA_1, MINX, MAXX, MINY, MAXY )#
{#
	### Compute mean cor and get PC1,PC2 ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	MEAN_COV = matrix(rep(0.0,Nst*Nst), nrow=Nst)#
	for (i in seq(1, Nst))#
	{#
		strain = strains[i]#
		st = get_strain_data(strain)#
		st_proj = st %*% V %*% SIGMA_1#
		st_proj = isolate_bad_data(st_proj)#
		COV = cor(st_proj)#
		MEAN_COV = MEAN_COV+COV#
	}#
	MEAN_COV = MEAN_COV/Nst#
	COVPOS = abs(COV)#
	diag(COVPOS) = 0.0#
	maxi = which(COVPOS==max(COVPOS), arr.ind=T)#
	PC1 = maxi[2,1]#
	PC2 = maxi[2,2]#
	### Plot data ####
	strains = get_strain_names()#
	Nst = length(strains)#
	colors = rainbow(Nst)#
	png(filename=paste("pic/PC1_PC2.png",sep=""), width=1000, height=600)#
	par(mfrow=c(1,2))#
	### first plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "cornflowerblue"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		val       = diag(COV)#
		COV       = diag(val, nrow=length(val), ncol=length(val))#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	### Second plot ####
	plot(x=NULL, xlim=c(MINX, MAXX), ylim=c(MINY, MAXY), xlab="PC1", ylab="PC2")#
	abline(h=0, lty=2)#
	abline(v=0, lty=2)#
	for (i in seq(1, Nst))#
	{#
		colors[i] = "tomato"#
		strain    = strains[i]#
		st        = get_strain_data(strain)#
		st_proj   = st %*% V %*% SIGMA_1#
		st_proj   = isolate_bad_data(st_proj)#
		x         = mean(st_proj[,PC1])#
		y         = mean(st_proj[,PC2])#
		COV       = cov(st_proj[,c(PC1,PC2)])#
		ELLIPS    = ellipse(COV*0.005, centre=c(x, y))#
		polygon(ELLIPS, col=rgb(0.9,0.9,1), border=colors[i], lwd=2)#
		text(x, y, strain, cex=0.5, font=2)#
	}#
	dev.off()#
}#
###################
#      MAIN      ##
###################
#
PATH = ""#
if (PATH == "")#
{#
	print(">>> ERROR: you must provide the path of the script 7_analysis.R. Please edit this script and re-run it.\nExit.\n")#
	quit()#
}#
setwd(PATH)#
#
INTER = read.table("interstrain_means/centered_scaled_mean.txt", sep=" ", h=T)#
#
N = length(INTER[1,])#
colnames = names(INTER)[2:N]#
rownames = INTER[,1]#
INTER = as.matrix(INTER[,2:N])#
colnames(INTER) = colnames#
rownames(INTER) = rownames#
#
SVD = svd(INTER)#
#
SV = SVD$d#
SIGMA = diag(SVD$d)#
SIGMA_1 = diag(1/SVD$d)#
U = as.matrix(SVD$u)#
V = as.matrix(SVD$v)#
#
plot_corr_mat(V, SIGMA_1)#
plot_mean_best_noise(V, SIGMA_1, -0.6, 0.6, -0.6, 0.6)
